%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2376 1074
%%HiResBoundingBox: 0 0 2376 1074
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2376 1074 re
W
q
[0.24 0 0 -0.24 0 1074] cm
q
0 0 9899.999 4473.5874 re
W*
q
[29.227699 0 0 29.231981 117.868973 802.0108] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
49.099998 49.448002 m
49.865997 50.025002 50.546997 50.706001 51.126999 51.469002 c
58.243999 45.003002 69.348999 40.842003 81.830002 40.842003 c
86.149002 40.842003 90.301003 41.343002 94.182999 42.262001 c
94.209 42.152 94.225998 42.039001 94.25 41.929001 c
89.291 39.990002 83.616997 38.882999 77.586998 38.882999 c
65.856003 38.882999 55.465 43.057999 49.099998 49.448002 c
h
f
87.043999 15.932 m
77.388 8.294001 63.564999 10.375 55.621998 20.542999 c
54.914997 21.448999 54.223999 22.366999 53.598 23.184 c
51.686001 21.052999 50.116001 18.924 48.176998 17.209 c
41.589996 11.379 33.977997 9.785999 25.700998 12.775 c
17.715998 15.658999 13.120998 21.65 12.174998 29.938999 c
12.061998 29.959999 11.948998 29.983999 11.834998 30.008999 c
11.827998 30.009998 11.820998 30.011999 11.814998 30.013998 c
11.618998 30.057999 11.420998 30.108997 11.221997 30.166998 c
11.145997 30.187998 11.068997 30.211998 10.992997 30.235998 c
10.875998 30.272999 10.759997 30.311998 10.642997 30.353998 c
10.536997 30.391998 10.431996 30.430998 10.326997 30.472998 c
10.258997 30.499998 10.191997 30.526999 10.123997 30.555998 c
9.974997 30.619997 9.825996 30.688997 9.676997 30.762999 c
9.621997 30.790998 9.566998 30.818998 9.511997 30.847998 c
9.352997 30.930998 9.194997 31.017998 9.038998 31.114998 c
9.004997 31.135998 8.971997 31.157997 8.938997 31.178997 c
8.788998 31.273996 8.639998 31.374996 8.493998 31.481997 c
8.465998 31.502996 8.435998 31.521997 8.408998 31.542997 c
8.246998 31.664997 8.088998 31.795998 7.931997 31.934998 c
7.897997 31.963997 7.864997 31.994997 7.830998 32.023998 c
7.674997 32.167 7.521997 32.317997 7.371997 32.477997 c
7.345997 32.506996 7.320997 32.535995 7.294997 32.563995 c
7.138997 32.736996 6.984997 32.917995 6.836997 33.111996 c
5.380997 35.029995 4.789997 37.443996 5.035997 40.618996 c
4.975997 40.618996 l
5.913997 52.177994 13.564997 59.660995 13.564997 59.660995 c
13.567997 59.662994 13.568996 59.664997 13.571997 59.666996 c
13.825996 59.959995 14.088997 60.248997 14.358996 60.539997 c
14.386996 60.568996 14.415997 60.600998 14.443996 60.631996 c
14.712997 60.920998 14.988997 61.207996 15.272997 61.494995 c
15.287997 61.510994 15.302997 61.525993 15.318996 61.541996 c
15.902996 62.131996 16.521996 62.719997 17.172997 63.301994 c
17.199997 63.324993 17.226997 63.348995 17.253996 63.373993 c
17.575996 63.658993 17.904995 63.943993 18.243996 64.227989 c
18.263996 64.243988 18.282995 64.258987 18.302996 64.276993 c
18.995996 64.854996 19.724997 65.424995 20.491997 65.985992 c
20.515997 66.005989 20.540997 66.022995 20.564997 66.040993 c
20.943996 66.317993 21.332996 66.591995 21.729996 66.86499 c
21.753996 66.880989 21.777996 66.897987 21.802996 66.913994 c
22.613997 67.466995 23.462996 68.007996 24.352995 68.536995 c
24.374994 68.550995 24.397995 68.561996 24.419994 68.575996 c
24.858994 68.837997 25.308994 69.093994 25.767994 69.345993 c
25.798994 69.363991 25.830994 69.380997 25.861994 69.398994 c
26.798994 69.912994 27.777994 70.412994 28.799994 70.892998 c
28.818993 70.903 28.837994 70.912994 28.856993 70.919998 c
29.360992 71.157997 29.874992 71.390999 30.399992 71.616997 c
30.439993 71.634995 30.478992 71.652 30.518991 71.667999 c
31.593992 72.132996 32.71199 72.578003 33.876991 73 c
33.890991 73.005997 33.902992 73.010002 33.916992 73.015999 c
34.487991 73.221001 35.069992 73.421997 35.663994 73.619995 c
35.715992 73.635994 35.767994 73.652992 35.817993 73.668999 c
36.415993 73.865997 37.024994 74.056 37.644993 74.240997 c
37.648994 74.240997 37.652992 74.242996 37.655994 74.244995 c
38.298996 74.433998 38.953995 74.617996 39.620995 74.795998 c
39.625996 74.797997 39.630993 74.799995 39.635994 74.799995 c
37.831993 73.178993 36.032993 71.557999 34.239994 69.934998 c
34.250996 69.945 l
34.544994 70.210999 34.840996 70.475998 35.134995 70.741997 c
18.574995 64.852997 11.855995 54.485996 9.163994 47.728996 c
9.029994 47.369995 8.852994 46.775997 8.763994 46.395996 c
8.705995 46.147995 8.648994 45.903996 8.581994 45.666996 c
7.078994 40.290997 7.165994 36.893997 8.864994 34.654995 c
8.975994 34.507996 9.091994 34.371994 9.210994 34.241997 c
9.256994 34.191998 9.306994 34.146996 9.353993 34.099998 c
9.427994 34.025997 9.499993 33.951 9.576993 33.882 c
9.640993 33.824001 9.707993 33.771999 9.773993 33.719002 c
9.834992 33.669003 9.895992 33.617001 9.957993 33.571003 c
10.036993 33.511002 10.118993 33.458004 10.198993 33.404003 c
10.249992 33.370003 10.299993 33.336002 10.349993 33.304005 c
10.442993 33.246006 10.537993 33.193005 10.632993 33.141006 c
10.671992 33.120007 10.709992 33.098007 10.748993 33.078007 c
10.855993 33.023006 10.963993 32.973007 11.072993 32.924007 c
11.098993 32.912006 11.125994 32.900009 11.152993 32.888008 c
11.273994 32.837009 11.394993 32.789009 11.515993 32.745007 c
11.529993 32.741005 11.542994 32.735008 11.556994 32.730007 c
11.593993 32.717007 11.631993 32.707008 11.668994 32.694008 c
11.757994 32.618008 12.083994 32.558006 12.083994 32.558006 c
12.083994 32.561005 l
13.404994 32.244003 14.674994 32.240005 15.573994 32.240005 c
20.594994 32.240005 l
20.594994 39.877007 l
15.573994 39.877007 l
15.366994 39.877007 13.857994 39.865005 12.845994 39.865005 c
12.272994 39.865005 l
12.676994 42.659004 13.416994 45.401005 14.503994 47.957005 c
14.504994 47.960003 14.504994 47.964005 14.506994 47.967003 c
14.527994 48.040005 14.551994 48.107002 14.573995 48.180004 c
14.585995 48.184006 14.592995 48.188004 14.605994 48.194004 c
16.325995 52.146004 18.888994 55.789005 22.372993 59.047005 c
25.978992 62.418003 29.627995 65.746002 33.293991 69.068008 c
34.227993 69.925011 l
43.820992 78.558014 l
47.029991 81.439011 50.24699 84.328011 53.472992 87.246017 c
56.19099 84.760017 58.723991 82.410019 61.290993 80.100021 c
68.908997 73.248024 76.64399 66.522018 84.134995 59.536022 c
88.688995 55.290024 91.863998 50.31002 93.572998 44.58902 c
89.898994 43.64502 85.948997 43.129021 81.830002 43.129021 c
69.682999 43.129021 58.971001 47.607021 52.681999 54.384022 c
53.042999 55.443024 53.243999 56.577023 53.243999 57.761021 c
53.243999 63.507019 48.585999 68.165024 42.84 68.165024 c
37.092999 68.165024 32.433998 63.507023 32.433998 57.761024 c
32.433998 52.015026 37.092999 47.356026 42.839996 47.356026 c
44.003998 47.356026 45.120995 47.550026 46.167995 47.902027 c
53.241997 41.053028 64.677994 36.601028 77.586998 36.601028 c
83.725998 36.601028 89.528999 37.609028 94.692001 39.402027 c
94.773003 38.812027 94.843002 38.218025 94.892998 37.614029 c
95.633003 29.118 94.085999 21.500999 87.043999 15.932 c
h
34.161999 42.639999 m
34.161999 43.398998 33.544998 44.014999 32.785 44.014999 c
24.646999 41.723 l
23.908998 41.465 23.271999 41.106998 23.271999 40.348 c
23.271999 32.095001 l
23.271999 31.336 23.873999 30.932001 24.646999 30.720001 c
32.785 28.427002 l
33.544998 28.427002 34.161999 29.043001 34.161999 29.802002 c
34.161999 42.639999 l
h
f
34.117001 69.823997 m
34.158001 69.861 34.199001 69.895996 34.239002 69.932999 c
34.229004 69.922997 l
34.117001 69.823997 l
h
f
42.839001 49.912998 m
38.513 49.912998 34.993999 53.431999 34.993999 57.757999 c
34.993999 62.082001 38.513 65.601997 42.839001 65.601997 c
47.164001 65.601997 50.682999 62.081997 50.682999 57.757996 c
50.683998 53.431999 47.165001 49.912998 42.839001 49.912998 c
h
42.839001 62.631001 m
40.151001 62.631001 37.964001 60.445 37.964001 57.757999 c
37.964001 55.070999 40.151001 52.882999 42.839001 52.882999 c
45.526001 52.882999 47.713001 55.070999 47.713001 57.757999 c
47.713001 60.445 45.526001 62.631001 42.839001 62.631001 c
h
f
Q
q
[26.329742 0 0 26.333597 9610.3643 263.336] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
-235 0 3 150 re
f
Q
q
[40.463825 0 0 40.469757 3749.7947 877.18561] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
23.68 39.040001 m
23.68 39.120003 l
23.68 39.120003 23.639999 39.160004 23.639999 39.200005 c
23.48 39.960003 21.24 40.280006 20.639999 40.200005 c
20.08 40.200005 19.559999 39.880005 19.359999 39.200005 c
17.919998 33.600006 16.759998 28.920006 15.839998 23.200005 c
14.239998 28.080006 13.159998 32.760006 11.719998 37.760006 c
11.559999 38.360004 11.479999 39.320007 11.039998 39.760006 c
10.599999 40.120007 7.999998 40.080006 7.559998 39.800007 c
6.879998 39.320007 6.599998 35.840008 6.479998 34.560005 c
6.199998 32.200005 5.919998 29.880005 5.599998 27.520004 c
4.959998 22.840004 4.279998 18.160004 3.839998 13.480004 c
3.759998 12.640004 3.719998 12.800004 3.639998 11.920004 c
3.439998 9.160004 7.759998 8.480003 7.999998 11.920004 c
8.479998 18.760004 9.199998 22.520004 10.079998 29.280005 c
11.799998 24.600004 11.959998 21.560005 13.519999 17.400005 c
13.759998 16.320005 14.959999 15.600005 15.959999 15.800005 c
16.519999 15.880005 17.839998 16.360004 17.879999 17.360004 c
19.32 22.840004 20.359999 24.600004 21.16 29.760004 c
22.440001 22.960003 22.879999 18.960003 23.16 12.000004 c
23.280001 8.880004 27.639999 8.680004 27.559999 12.000004 c
27.32 21.440002 25.719999 29.880003 23.68 39.040005 c
23.68 39.040001 l
h
50.52 11.96 m
50.68 16.119999 50.68 19.48 50.600002 23.639999 c
50.560001 27.559999 50.960003 32.720001 50.040001 36.079998 c
49.240002 39.079998 45.120003 40.279999 41.880001 40.279999 c
39.760002 40.279999 36.84 39.16 35.800003 37.32 c
34.720001 35.360001 34.600002 32.68 34.600002 30.52 c
34.560001 28.32 34.600002 26.120001 34.560001 23.880001 c
34.52 19.6 34.640003 16.120001 34.800003 11.840001 c
34.920002 8.960001 39.280003 8.640001 39.160004 11.840001 c
39.000004 16 38.880005 19.400002 38.920002 23.560001 c
38.960003 25.68 38.960003 27.760002 39.000004 29.840002 c
39.040005 32.920002 39.040005 35.920002 41.880005 35.960003 c
46.040005 36.000004 46.120003 33.240002 46.120003 30.720003 c
46.080002 28.520002 46.120003 26.280003 46.160004 24.080004 c
46.240005 19.760004 46.280003 16.280003 46.160004 11.960004 c
46.080002 9.240004 50.440002 8.920004 50.520004 11.960004 c
50.52 11.96 l
h
69.160004 11.8 m
69.160004 9.16 73.440002 9 73.560005 11.8 c
73.960007 21.08 73.120003 28.759998 73.400002 38.040001 c
73.480003 40.799999 69.160004 40.959999 69.040001 38.040001 c
68.840004 32.760002 69.080002 29.52 69.120003 24.240002 c
66.32 24.440002 64.160004 23.720001 61.480003 24.400002 c
61.400002 29.560001 61.480003 32.720001 61.360004 37.880001 c
61.280003 41 56.920006 40.880001 57.000004 37.880001 c
57.240005 28.760002 56.800003 21.240002 57.160004 12.120001 c
57.280003 9.240001 61.640003 9.160001 61.520004 12.120001 c
61.400005 15.120001 61.520004 16.920002 61.520004 19.960001 c
64.280006 19.52 66.320007 20.280001 69.120003 19.92 c
69.160004 16.799999 69.160004 14.92 69.160004 11.8 c
h
96.440002 37.799999 m
97 40.279999 93 41.16 92.279999 38.880001 c
91.760002 37.200001 91.68 36.16 91.400002 34.400002 c
88.840004 34.52 86.919998 34.480003 84.360001 34.240002 c
83.919998 35.880001 83.639999 37.120003 83.199997 38.720001 c
82.479996 41.280003 78.519997 40.200001 79.32 37.080002 c
81.639999 28.000002 83.279999 20.600002 85.800003 11.560001 c
85.800003 11.200002 86.400002 9.560001 88.520004 9.560001 c
90.440002 9.560001 91.200005 10.440002 91.440002 11.440002 c
94.520004 20.480001 94.32 28.560001 96.440002 37.800003 c
96.440002 37.799999 l
h
85.480003 29.92 m
87.68 30.120001 88.360001 30.120001 90.560005 30.08 c
89.760002 24.959999 89.880005 21.799999 88.640007 16.799999 c
87.280006 21.84 86.76001 24.879999 85.480003 29.919998 c
85.480003 29.92 l
h
114.160004 12.24 m
112.400002 16.68 110.560005 20.4 108.600006 24.76 c
108.560005 29.360001 108.520004 33.200001 108.520004 37.799999 c
108.520004 40.599998 104.120003 40.639999 104.120003 37.799999 c
104.120003 33.040001 104.200005 29.039999 104.200005 24.279999 c
104.200005 24.199999 l
102.840004 19.959999 101.320007 16.56 99.320007 12.599999 c
98.040009 10.039999 101.720009 8.199999 103.320007 11.239999 c
105.000008 14.439999 105.360008 15.519999 106.640007 18.919998 c
108.12001 15.759998 108.560005 14.759998 109.880005 11.519999 c
111.080002 8.599999 115.080002 9.839998 114.160004 12.239999 c
114.160004 12.24 l
h
133.639999 11.96 m
133.800003 16.119999 133.800003 19.48 133.720001 23.639999 c
133.680008 27.559999 134.080002 32.720001 133.160004 36.079998 c
132.360001 39.079998 128.240005 40.279999 125 40.279999 c
122.879997 40.279999 119.959999 39.16 118.919998 37.32 c
117.839996 35.360001 117.720001 32.68 117.720001 30.52 c
117.68 28.32 117.720001 26.120001 117.68 23.880001 c
117.639999 19.6 117.760002 16.120001 117.919998 11.840001 c
118.040001 8.960001 122.400002 8.640001 122.279999 11.840001 c
122.119995 16 122 19.400002 122.040001 23.560001 c
122.080002 25.68 122.080002 27.760002 122.120003 29.840002 c
122.160004 32.920002 122.160004 35.920002 125 35.960003 c
129.160004 36.000004 129.240005 33.240002 129.240005 30.720003 c
129.200012 28.520002 129.240005 26.280003 129.279999 24.080004 c
129.360001 19.760004 129.399994 16.280003 129.279999 11.960004 c
129.199997 9.240004 133.559998 8.920004 133.639999 11.960004 c
133.639999 11.96 l
h
f
Q
q
[30.551146 0 0 30.55562 3847.3337 2618.9961] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
7.7 5.9 m
7.7 4.58 9.84 4.5 9.9 5.9 c
10.099999 10.54 9.679999 14.379999 9.82 19.02 c
9.86 20.4 7.7 20.48 7.639999 19.02 c
7.54 16.380001 7.659999 14.76 7.679999 12.120001 c
6.279999 12.220001 5.199999 11.860001 3.859999 12.200001 c
3.82 14.780001 3.859999 16.360001 3.8 18.940001 c
3.76 20.5 1.579999 20.440001 1.619999 18.940001 c
1.739999 14.380001 1.519999 10.620001 1.7 6.06 c
1.76 4.62 3.94 4.58 3.88 6.06 c
3.82 7.56 3.88 8.460001 3.88 9.980001 c
5.26 9.76 6.28 10.14 7.679999 9.96 c
7.699999 8.4 7.699999 7.46 7.699999 5.9 c
7.7 5.9 l
h
22.494499 17.84 m
23.974499 17.68 23.994499 19.959999 22.494499 20.02 c
20.734499 20.1 18.0945 20.08 16.314499 20.18 c
16.134499 20.200001 16.0145 20.139999 15.894499 20.08 c
15.634499 20 15.434499 19.799999 15.454499 19.440001 c
15.7145 14.92 15.374499 10.38 15.5145 5.860001 c
15.3945 5.460001 15.6145 4.960001 16.134501 5.000001 c
17.9345 5.1 20.594501 5.12 22.394501 5.06 c
23.7945 5.02 23.814501 7.200001 22.394501 7.240001 c
20.834501 7.280001 19.274502 7.240001 17.734501 7.200001 c
17.6945 9.26 17.674501 7.740001 17.7145 9.800001 c
18.7945 10.160001 20.1145 10.000001 21.254501 9.960001 c
22.734501 9.900001 22.754501 12.280001 21.254501 12.320002 c
20.134501 12.340002 18.854502 12.500002 17.734501 12.240002 c
17.734501 13.820002 17.7945 16.400001 17.7145 17.980001 c
19.314501 17.940001 20.914501 18.020002 22.494499 17.840002 c
22.494499 17.84 l
h
37.328999 18.9 m
37.608997 20.139999 35.608997 20.58 35.249001 19.440001 c
34.989002 18.6 34.949001 18.08 34.809002 17.200001 c
33.529003 17.26 32.569 17.240002 31.289001 17.120001 c
31.069002 17.940001 30.929001 18.560001 30.709002 19.360001 c
30.349001 20.640001 28.369001 20.1 28.769001 18.540001 c
29.929001 14.000001 30.749001 10.300001 32.009003 5.780001 c
32.009003 5.600001 32.309002 4.780001 33.369003 4.780001 c
34.329002 4.780001 34.709003 5.220001 34.829002 5.720001 c
36.369003 10.240001 36.269001 14.280001 37.329002 18.900002 c
37.328999 18.9 l
h
31.849001 14.96 m
32.949001 15.06 33.289001 15.06 34.389 15.04 c
33.988998 12.48 34.049 10.9 33.429001 8.4 c
32.749001 10.92 32.489002 12.44 31.849001 14.959999 c
31.849001 14.96 l
h
49.623501 17.719999 m
51.203499 17.599998 51.283501 19.759998 49.623501 19.9 c
44.043503 19.9 l
43.703503 20.02 43.283504 19.92 43.163502 19.58 c
43.043503 19.360001 43.043503 19.1 43.143501 18.879999 c
43.463501 14.48 43.1035 10.4 43.043503 5.999999 c
43.023502 4.519999 45.203503 4.439999 45.223503 5.999999 c
45.283504 10.299999 45.623505 13.439999 45.343502 17.719999 c
49.623501 17.719999 l
h
60.577999 4.94 m
62.077999 4.98 62.217999 7.22 60.577999 7.12 c
59.618 7.06 59.077999 7.12 58.138 7.12 c
57.998001 11.56 57.897999 14.68 57.958 19.040001 c
57.978001 20.540001 55.778 20.380001 55.778 19.040001 c
55.778 14.68 55.818001 11.560001 55.958 7.140001 c
55.038002 7.160001 54.518002 7.220001 53.618 7.180001 c
52.158001 7.100001 52.158001 4.920001 53.618 5.000001 c
55.938 5.120001 58.257999 4.900001 60.577999 4.940001 c
60.577999 4.94 l
h
73.032501 5.9 m
73.032501 4.58 75.172501 4.5 75.232498 5.9 c
75.432495 10.54 75.012497 14.379999 75.152496 19.02 c
75.192497 20.4 73.032494 20.48 72.972496 19.02 c
72.872498 16.380001 72.992493 14.76 73.012497 12.120001 c
71.612495 12.220001 70.532494 11.860001 69.192497 12.200001 c
69.152496 14.780001 69.192497 16.360001 69.1325 18.940001 c
69.092499 20.5 66.912498 20.440001 66.952499 18.940001 c
67.072502 14.380001 66.852501 10.620001 67.032501 6.06 c
67.092499 4.62 69.272499 4.58 69.212502 6.06 c
69.152504 7.56 69.212502 8.460001 69.212502 9.980001 c
70.592499 9.76 71.612503 10.14 73.012505 9.96 c
73.032501 8.4 73.032501 7.46 73.032501 5.9 c
h
88.946999 6.12 m
88.067001 8.34 87.146996 10.2 86.167 12.38 c
86.147003 14.68 86.126999 16.6 86.126999 18.9 c
86.126999 20.299999 83.927002 20.32 83.927002 18.9 c
83.927002 16.52 83.967003 14.52 83.967003 12.139999 c
83.967003 12.099999 l
83.287003 9.98 82.527 8.28 81.527 6.299999 c
80.887001 5.02 82.726997 4.099999 83.527 5.619999 c
84.366997 7.219999 84.546997 7.759999 85.187004 9.459999 c
85.927002 7.879999 86.147003 7.379999 86.807007 5.759999 c
87.407005 4.299999 89.407005 4.919999 88.947006 6.119999 c
88.946999 6.12 l
h
113.075996 6.12 m
112.195999 8.34 111.275993 10.2 110.295998 12.38 c
110.276001 14.68 110.255997 16.6 110.255997 18.9 c
110.255997 20.299999 108.056 20.32 108.056 18.9 c
108.056 16.52 108.096001 14.52 108.096001 12.139999 c
108.096001 12.099999 l
107.416 9.98 106.655998 8.28 105.655998 6.299999 c
105.015999 5.02 106.855995 4.099999 107.655998 5.619999 c
108.495995 7.219999 108.675995 7.759999 109.316002 9.459999 c
110.056 7.879999 110.276001 7.379999 110.936005 5.759999 c
111.536003 4.299999 113.536003 4.919999 113.076004 6.119999 c
113.075996 6.12 l
h
121.390503 4.78 m
125.2705 4.8 125.370506 10.799999 125.550507 13.599999 c
125.690506 15.699999 124.050507 21.539999 119.970505 19.84 c
117.110504 18.639999 116.850502 13.96 117.090508 11.3 c
117.290504 9.1 117.890511 5.88 120.190506 4.96 c
120.310509 4.86 120.930504 4.78 121.130508 4.78 c
121.310509 4.78 l
121.390511 4.78 l
121.390503 4.78 l
h
123.370499 13.6 m
123.370499 11.940001 122.9505 6.68 121.4105 6.980001 c
118.7705 7.480001 119.190498 14.900001 119.890503 16.68 c
120.370506 17.9 121.890503 18.940001 122.7705 17 c
123.230499 15.98 123.370499 14.78 123.370499 13.6 c
h
139.445007 5.98 m
139.525009 8.06 139.525009 9.74 139.485001 11.82 c
139.464996 13.78 139.664993 16.360001 139.205002 18.039999 c
138.805008 19.539999 136.744995 20.139999 135.125 20.139999 c
134.065002 20.139999 132.604996 19.58 132.085007 18.66 c
131.545013 17.68 131.485001 16.34 131.485001 15.26 c
131.464996 14.16 131.485001 13.06 131.464996 11.940001 c
131.444992 9.8 131.50499 8.06 131.584991 5.920001 c
131.644989 4.480001 133.824997 4.320001 133.764984 5.920001 c
133.684982 8 133.624985 9.700001 133.644989 11.780001 c
133.664993 12.84 133.664993 13.880001 133.684982 14.920001 c
133.704987 16.460001 133.704987 17.960001 135.124985 17.980001 c
137.204987 18.000002 137.24498 16.620001 137.24498 15.360002 c
137.224976 14.260001 137.24498 13.140001 137.264984 12.040002 c
137.304977 9.880002 137.324982 8.140001 137.264984 5.980002 c
137.224991 4.620002 139.404984 4.460002 139.444977 5.980002 c
139.445007 5.98 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
